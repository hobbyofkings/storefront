To run your Django application on an EC2 instance in a production environment, you should not use python manage.py runserver because it's designed for development and not production. Instead, you should use Gunicorn (a WSGI server) along with Nginx as a reverse proxy. Here's how to properly set up and run Django on your EC2 instance:

Step-by-Step Guide to Run Django on EC2 with Gunicorn and Nginx
1. Install Gunicorn
First, install Gunicorn in your virtual environment:

bash
Copy code
pip install gunicorn
2. Test Gunicorn Locally
You can test Gunicorn to ensure it runs your Django app properly:

bash
Copy code
gunicorn --workers 3 storefront.wsgi:application
--workers 3: This sets the number of worker processes. You can adjust it based on your server’s capacity (a general rule is 2-4 workers per core).
storefront.wsgi:application: This points Gunicorn to your Django project’s WSGI entry point.
This will start your app on port 8000 by default. However, running Gunicorn directly is not ideal for production, so next, we'll set up Nginx to handle requests and serve static files.

3. Install and Configure Nginx
Nginx will act as a reverse proxy, forwarding HTTP requests to Gunicorn and serving static and media files.

Install Nginx:

bash
Copy code
sudo apt install nginx
4. Configure Nginx
Create a new Nginx configuration file for your project:

bash
Copy code
sudo nano /etc/nginx/sites-available/storefront
Add the following configuration, which routes traffic to Gunicorn and serves static and media files:

nginx
Copy code
server {
    listen 80;
    server_name amadesa.com www.amadesa.com;  # Replace with your domain or EC2 public IP

    location / {
        proxy_pass http://127.0.0.1:8000;  # Gunicorn is listening on port 8000
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /home/ubuntu/storefront/static/;  # Your static files directory
    }

    location /media/ {
        alias /home/ubuntu/storefront/media/;   # Your media files directory
    }

    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
Save and close the file.

5. Enable the Nginx Configuration
Create a symbolic link to enable the Nginx configuration:

bash
Copy code
sudo ln -s /etc/nginx/sites-available/storefront /etc/nginx/sites-enabled/
Test the Nginx configuration:

bash
Copy code
sudo nginx -t
If the configuration test is successful, restart Nginx:

bash
Copy code
sudo systemctl restart nginx
6. Configure Gunicorn to Run as a Service
You need to set up Gunicorn to run in the background, managed by Systemd. Create a new service file for Gunicorn:

bash
Copy code
sudo nano /etc/systemd/system/gunicorn.service
Add the following configuration (adjust paths as needed):

ini
Copy code
[Unit]
Description=gunicorn daemon for storefront
After=network.target

[Service]
User=ubuntu  # Replace with your user if different
Group=www-data
WorkingDirectory=/home/ubuntu/storefront
ExecStart=/home/ubuntu/storefront/env/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/storefront.sock storefront.wsgi:application

[Install]
WantedBy=multi-user.target
Save and close the file.

7. Start and Enable the Gunicorn Service
Start Gunicorn:

bash
Copy code
sudo systemctl start gunicorn
Enable Gunicorn to start on boot:

bash
Copy code
sudo systemctl enable gunicorn
8. Collect Static Files
Ensure static files are collected into the directory specified by STATIC_ROOT:

bash
Copy code
python manage.py collectstatic
9. Check the Setup
Once everything is configured, your Django app should be accessible via your domain or public IP in a web browser:

Go to http://amadesa.com or http://34.233.154.89 (your EC2 instance’s public IP).
Summary
Gunicorn will serve your Django app and handle the application logic.
Nginx acts as a reverse proxy to handle requests, forward them to Gunicorn, and serve static/media files.
Systemd is used to manage Gunicorn, ensuring it runs in the background.