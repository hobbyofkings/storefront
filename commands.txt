

Summary
Do not use manage.py runserver in production.
Use Gunicorn as the WSGI server.
Use Nginx as a reverse proxy to handle static files and forward requests to Gunicorn
# after update from git, linux does not have NGINX FILES INFO





https://www.udemy.com/course/deploy-a-django-web-app-with-nginx-and-amazon-ecs-2022/learn/lecture/38244906#content


{"instance": {"Id": "amadesadb", "Location": "us-east-1d", "SecurityGroupId": "sg-0f488a27668ed60c4", "Hostname": "amadesadb.cp8a808oguxu.us-east-1.rds.amazonaws.com", "Port": 5432, "Database": "amadesadb", "Username": "amadesa"}}

psql -h amadesadb.cp8a808oguxu.us-east-1.rds.amazonaws.com -U amadesa -d amadesadb -p 5432


Test db connection
Test-NetConnection -ComputerName amadesadb.cp8a808oguxu.us-east-1.rds.amazonaws.com -Port 5432

 sudo ufw allow 5432/tcp



cd storefront
# linux: source venv/bin/activate
# in home pc: .\env\Scripts\Activate.ps1
# git

git pull origin amazon

# stash git if shiwing merge:

git stash
git pull origin amazon
git stash pop
pip install psycopg2-binary


#migrate
python manage.py migrate
python3 manage.py makemigrations


to run server
gunicorn --workers 3 storefront.wsgi:application


docker
docker-compose down # to stop the project
docker-compose up # to run the project
docker-compose up --build  # Rebuilds and starts the containers

date
sudo apt install ntp
sudo service ntp restart
psql "host=amadesa-db.cp8a808oguxu.us-east-1.rds.amazonaws.com port=5432 dbname=amadesa user=postgres password=Respublika10 sslmode=disable"
wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem -O ~/storefront/rds-ca-bundle.pem
psql amadesa-db.cp8a808oguxu.us-east-1.rds.amazonaws.com port=5432 dbname=amadesa user=postgres password=Respublika10! sslmode=require sslrootcert=rds-ca-bundle.pem



gunicorn --workers 3 storefront.wsgi:application
sudo nano /etc/nginx/sites-available/amadesa.com

# what is that?
curl --unix-socket /home/ubuntu/storefront/storefront.sock localhost


Check Gunicorn Status Check if Gunicorn is running:

Restart Gunicorn:
sudo systemctl restart gunicorn
Reload the systemd configuration:

sudo systemctl daemon-reload




Open the Nginx configuration file
sudo nano /etc/nginx/sites-available/storefront



Check Nginx Status
Check if Nginx is running:
sudo systemctl status nginx
Restart Nginx:
sudo systemctl restart nginx
Test Nginx configuration:
sudo nginx -t
Check Active Connections
Check open ports and listening services:

sudo netstat -tuln
Check Logs
View Gunicorn logs:

sudo journalctl -u gunicorn
View Nginx error logs:

sudo tail -f /var/log/nginx/error.log


Test HTTP Response
Test Nginx server response locally:
curl http://127.0.0.1
Test the public IP or domain:
curl http://<your-public-ip>


Check Firewall Rules
Check firewall status:
sudo ufw status

List running services:
sudo systemctl list-units --type=service

View the status of all system services:
sudo systemctl --failed




